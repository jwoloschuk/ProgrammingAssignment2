## Below are two functions that are used to create a special object that stores
## a numeric vector and cache as the inverse of a matrix

## This first function, makecacheMatix creates a special "vector", which is 
## really a list containing a function to:

makeCacheMatrix <- function(x = matrix()) {
        
        
        ## Matrix
        m <- NULL
        ## 1) Set the value of the matrix
        set <- function(y){
                
                # Sets the value of the matrix in the parent environment
                x <<- y
                
                m <<- NULL
        }
        
        ## 2) Get the value of the matrix
        get <- function() x
        
        ## 3) Set the value of the matrix inverse in the parent environment
        set_inv <- function(inverse) m <<- inverse
        
        ## 4) Get the value of the matix inverse
        get_inv <- function() m
        
        ## This is the returned list
        list(set = set,
             get = get,
             set_inv = set_inv,
             get_inv = get_inv)

}


## This second function, cacheSolve either computes the inverse of the matrix
## or returns the previously calculated and cached inverse matrix

cacheSolve <- function(x, ...) {
        
        ## Returns the inverse matrix from the cache and ends the function
        m <- x$get_inv()
        if(!is.null(m)) {
                message("Getting cached data")
                return(m)
        }
        ## Calculates the inverse matrix from the cache using the Solve function
        data <- x$get()
        m <- solve(data, ...)
        x$set_inv(m)
        m
}


## Function test below:

## a <- matrix(rnorm(16), nrow = 4, ncol = 4)
##> mat$set(a)
##> cacheSolve(mat)

##[,1]       [,2]       [,3]       [,4]
##[1,] -1.017065   1.263616   1.676221  0.6599423
##[2,]  5.947770  -4.256656  -7.410220 -1.7354222
##[3,] 15.595614 -10.713177 -18.583903 -6.9926685
##[4,] -2.608487   1.926218   3.876798  1.3360658

##> a %*% cacheSolve(mat)
##Getting cached data

##[,1]          [,2]          [,3]          [,4]
##[1,] 1.000000e+00 -6.661338e-16 -8.881784e-16 -8.881784e-16
##[2,] 0.000000e+00  1.000000e+00  0.000000e+00 -2.220446e-16
##[3,] 8.881784e-16 -4.440892e-16  1.000000e+00  0.000000e+00
##[4,] 1.110223e-16  6.661338e-16  2.220446e-16  1.000000e+00

## Matrix a times by cacheSolve(mat) results in the identity matrix 
